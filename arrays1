//Set Matrix Zeroes
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector <int> dummyRow(row,-1);
        vector<int> dummyCol(col,-1);
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    dummyRow[i] = 0;
                    dummyCol[j] = 0;
                }
            }
        }
         for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(dummyRow[i] == 0 || dummyCol[j] == 0 ){
                    matrix[i][j]=0;
                }
            }
        }


    }
};

//Pascal's Triangle
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans;
        
        for(int i=0;i<numRows;i++){
            vector<int> row(i+1,1);
            for(int j=1;j<i;j++){
               
               row[j]=ans[i-1][j-1]+ans[i-1][j];

            }
            ans.push_back(row);   
        }
        return ans ;
    }
};

//Next Permutation


//Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int max=INT_MIN;
        int sum=0;

        for(int i=0 ; i<n ;i++){
            sum=sum+nums[i];
            if (sum > max) {
            max = sum;
        }
            if(sum<0){
                sum=0;
            }
        }
        return max;
    }
};


//Sort Colors
class Solution {
public:
    void sortColors(vector<int>& nums) {
     int low=0,mid=0,high=nums.size()-1;
     while(mid<=high){
         if(nums[mid]==0){
             swap(nums[low],nums[mid]);
             low++;
             mid++;
         }
         else if(nums[mid]==1){
             mid++;
         }
         else{
             swap(nums[mid],nums[high]);
             high--;
             
         }
     }   
    }
};

//Best Time to Buy and Sell Stock
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int K=INT_MAX ;
            int op = 0; 
        int pist = 0; 
        for(int i=0 ; i<prices.size();i++){
            if(prices[i]<K){
               K=prices[i];
            }
            pist = prices[i] - K; 
            if(op < pist){ 
                op = pist; 
            }

        }
        return op ;
    }
};
