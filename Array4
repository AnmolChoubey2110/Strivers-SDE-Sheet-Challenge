// Two Sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       vector <int> ans;
        unordered_map<int , int > mpp;
        for(int i=0 ; i<nums.size(); i++){
            if(mpp.find(target-nums[i]) !=mpp.end()){
                ans.push_back(mpp[target-nums[i]]);
                ans.push_back(i);
                return ans;
            }
            mpp[nums[i]]=i;
        }
        return ans;
    }
};

//4Sum
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());

        for(int i =0 ; i<n ; i++){
            if(i>0 && nums[i]==nums[i-1])
            continue ;
                for(int j=i+1;j<n;j++){
                    if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                    int k=j+1;
                    int l=n-1;
                    while (k < l) {
                long long sum = nums[i];
                sum += nums[j];
                sum += nums[k];
                sum += nums[l];
                if(sum==target){
                    vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                    ans.push_back(temp);
                    k++;
                    l--;
                    while (k < l && nums[k] == nums[k - 1]) k++;
                    while (k < l && nums[l] == nums[l + 1]) l--;
                }
                else if(sum<target)
                k++;
                else
                    l--;

                }
                }  
        }
        return ans ;
    }
};

//Longest Consecutive Sequence
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        
        if(nums.size()==0){
            return 0;
        }
        int currSeq=1;
        int longSeq=0;
        for(int i =1 ; i<nums.size();i++){
            if(nums[i]!=nums[i-1]){
                 if(nums[i]-nums[i-1]==1){
                     currSeq++;
                 }

            
            else{
                longSeq=max(longSeq,currSeq);
                currSeq=1;
               
            }

        }
        }
        return max(longSeq,currSeq);
    }
};

//Length of the longest subarray with zero Sum

int maxLen(int A[], int n)
{
    // Your code here
    unordered_map<int,int> vals; 
    int maxi = 0;
    int sum = 0; 
    for(int i = 0;i<n;i++) {
        sum += A[i]; 
        if(sum == 0) {
            maxi = i + 1; 
        }
        else {
            if(vals.find(sum) != vals.end()) {
                maxi = max(maxi, i - vals[sum]); 
            }
            else {
                vals[sum] = i;
            }
        }   
    }

    return maxi; 
}



//Longest Substring Without Repeating Characters
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> mpp(128, -1);
        
        int left=0, right=0;
        int n=s.size();
        int len=0;
        while(right<n){
            if(mpp[s[right]] != -1) left= max(mpp[s[right]]+1 , left);
            
            mpp[s[right]]=right;
            
            len=max(len, right-left+1);
            right++;
        }
        return len;
    }
};
